<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Messages/Model/Message.php
*/
abstract class Plugg_Messages_Model_Base_Message extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Message', $model);
        $this->_vars = array('message_id' => 0, 'message_created' => 0, 'message_updated' => 0, 'message_from_to' => 0, 'message_title' => null, 'message_body' => null, 'message_body_html' => null, 'message_body_filter_id' => 0, 'message_read' => 0, 'message_star' => 0, 'message_deleted' => 0, 'message_type' => 0, 'message_key' => null, 'message_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('message_id' => 0, 'message_created' => 0, 'message_updated' => 0));
    }

    public function __toString()
    {
        return 'Message #' . $this->_get('id', null, null);
    }

    public function assignUser($user, $markDirty = true)
    {
        $this->_set('user_id', $user->id, $markDirty);
        return $this;
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->User_Identity($this->_vars['message_user_id'], $withData);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['message_id'];
        case 'created':
            return $this->_vars['message_created'];
        case 'updated':
            return $this->_vars['message_updated'];
        case 'from_to':
            return $this->_vars['message_from_to'];
        case 'title':
            return $this->_vars['message_title'];
        case 'body':
            return $this->_vars['message_body'];
        case 'body_html':
            return $this->_vars['message_body_html'];
        case 'body_filter_id':
            return $this->_vars['message_body_filter_id'];
        case 'read':
            return $this->_vars['message_read'];
        case 'star':
            return $this->_vars['message_star'];
        case 'deleted':
            return $this->_vars['message_deleted'];
        case 'type':
            return $this->_vars['message_type'];
        case 'key':
            return $this->_vars['message_key'];
        case 'user_id':
            return $this->_vars['message_user_id'];
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('message_id', $value, $markDirty);
            break;
        case 'from_to':
            $this->_setVar('message_from_to', $value, $markDirty);
            break;
        case 'title':
            $this->_setVar('message_title', $value, $markDirty);
            break;
        case 'body':
            $this->_setVar('message_body', $value, $markDirty);
            break;
        case 'body_html':
            $this->_setVar('message_body_html', $value, $markDirty);
            break;
        case 'body_filter_id':
            $this->_setVar('message_body_filter_id', $value, $markDirty);
            break;
        case 'read':
            $this->_setVar('message_read', $value, $markDirty);
            break;
        case 'star':
            $this->_setVar('message_star', $value, $markDirty);
            break;
        case 'deleted':
            $this->_setVar('message_deleted', $value, $markDirty);
            break;
        case 'type':
            $this->_setVar('message_type', $value, $markDirty);
            break;
        case 'key':
            $this->_setVar('message_key', $value, $markDirty);
            break;
        case 'user_id':
            $this->_setVar('message_user_id', $value, $markDirty);
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Messages_Model_Base_MessageRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Message', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('message_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('message_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('message_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('message_user_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Messages_Model_Base_MessagesByRowset($rs, $this->_model->create('Message'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Messages_Model_Base_Messages($this->_model, $entities);
    }
}

class Plugg_Messages_Model_Base_MessagesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_Messages_Model_Message $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Messages', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Messages_Model_Base_Messages extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Messages', $entities);
    }
}