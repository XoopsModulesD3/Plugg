<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Forum/Model/Topic.php
*/
abstract class Plugg_Forum_Model_Base_Topic extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Topic', $model);
        $this->_vars = array('topic_id' => 0, 'topic_created' => 0, 'topic_updated' => 0, 'topic_title' => null, 'topic_body' => null, 'topic_body_html' => null, 'topic_body_filter_id' => 0, 'topic_ip' => null, 'topic_host' => null, 'topic_closed' => 0, 'topic_sticky' => 0, 'topic_views' => 0, 'topic_last_posted' => 0, 'topic_user_id' => 0, 'topic_group_id' => 0, 'topic_comment_count' => 0, 'topic_comment_last' => 0, 'topic_comment_lasttime' => 0, 'topic_star_count' => 0, 'topic_star_last' => 0, 'topic_star_lasttime' => 0, 'topic_attachment_count' => 0, 'topic_attachment_last' => 0, 'topic_attachment_lasttime' => 0);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('topic_id' => 0, 'topic_created' => 0, 'topic_updated' => 0, 'topic_comment_count' => 0, 'topic_comment_last' => 0, 'topic_comment_lasttime' => 0, 'topic_star_count' => 0, 'topic_star_last' => 0, 'topic_star_lasttime' => 0, 'topic_attachment_count' => 0, 'topic_attachment_last' => 0, 'topic_attachment_lasttime' => 0));
    }

    public function __toString()
    {
        return $this->_get('title', null, null);
    }

    public function assignUser($user, $markDirty = true)
    {
        $this->_set('user_id', $user->id, $markDirty);
        return $this;
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->User_Identity($this->_vars['topic_user_id'], $withData);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function assignGroup(Plugg_Groups_Model_Group $group, $markDirty = true)
    {
        $this->_set('group_id', $group->id, $markDirty);
        return $this;
    }

    protected function _fetchGroup()
    {
        if (!isset($this->_objects['Group'])) {
            if (empty($this->_vars['topic_group_id'])) {
                $this->_objects['Group'] = false;
            } else {
                $this->_objects['Group'] = $this->_model->Groups_Group($this->group_id);
            }
        }

        return $this->_objects['Group'];
    }

    public function addComment(Plugg_Forum_Model_Comment $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeComment(Plugg_Forum_Model_Comment $entity)
    {
        return $this->removeCommentById($entity->id);
    }

    public function removeCommentById($id)
    {
        return $this->_removeEntityById('comment_id', 'Comment', $id);
    }

    public function createComment()
    {
        return $this->_createEntity('Comment');
    }

    protected function _fetchComments($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Comment', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastComment()
    {
        if (!isset($this->_objects['LastComment']) && $this->hasLastComment()) {
            $this->_objects['LastComment'] = $this->_fetchEntities('Comment', 1, 0, 'comment_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastComment'];
    }

    public function paginateComments($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Comment', $perpage, $sort, $order);
    }

    public function removeComments()
    {
        return $this->_removeEntities('Comment');
    }

    public function countComments()
    {
        return $this->_countEntities('Comment');
    }

    public function addStar(Plugg_Forum_Model_Star $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeStar(Plugg_Forum_Model_Star $entity)
    {
        return $this->removeStarById($entity->id);
    }

    public function removeStarById($id)
    {
        return $this->_removeEntityById('star_id', 'Star', $id);
    }

    public function createStar()
    {
        return $this->_createEntity('Star');
    }

    protected function _fetchStars($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Star', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastStar()
    {
        if (!isset($this->_objects['LastStar']) && $this->hasLastStar()) {
            $this->_objects['LastStar'] = $this->_fetchEntities('Star', 1, 0, 'star_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastStar'];
    }

    public function paginateStars($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Star', $perpage, $sort, $order);
    }

    public function removeStars()
    {
        return $this->_removeEntities('Star');
    }

    public function countStars()
    {
        return $this->_countEntities('Star');
    }

    public function addView(Plugg_Forum_Model_View $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeView(Plugg_Forum_Model_View $entity)
    {
        return $this->removeViewById($entity->id);
    }

    public function removeViewById($id)
    {
        return $this->_removeEntityById('view_id', 'View', $id);
    }

    public function createView()
    {
        return $this->_createEntity('View');
    }

    protected function _fetchViews($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('View', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastView()
    {
        if (!isset($this->_objects['LastView']) && $this->hasLastView()) {
            $this->_objects['LastView'] = $this->_fetchEntities('View', 1, 0, 'view_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastView'];
    }

    public function paginateViews($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('View', $perpage, $sort, $order);
    }

    public function removeViews()
    {
        return $this->_removeEntities('View');
    }

    public function countViews()
    {
        return $this->_countEntities('View');
    }

    public function addAttachment(Plugg_Forum_Model_Attachment $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeAttachment(Plugg_Forum_Model_Attachment $entity)
    {
        return $this->removeAttachmentById($entity->id);
    }

    public function removeAttachmentById($id)
    {
        return $this->_removeEntityById('attachment_id', 'Attachment', $id);
    }

    public function createAttachment()
    {
        return $this->_createEntity('Attachment');
    }

    protected function _fetchAttachments($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Attachment', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastAttachment()
    {
        if (!isset($this->_objects['LastAttachment']) && $this->hasLastAttachment()) {
            $this->_objects['LastAttachment'] = $this->_fetchEntities('Attachment', 1, 0, 'attachment_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastAttachment'];
    }

    public function paginateAttachments($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Attachment', $perpage, $sort, $order);
    }

    public function removeAttachments()
    {
        return $this->_removeEntities('Attachment');
    }

    public function countAttachments()
    {
        return $this->_countEntities('Attachment');
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['topic_id'];
        case 'created':
            return $this->_vars['topic_created'];
        case 'updated':
            return $this->_vars['topic_updated'];
        case 'title':
            return $this->_vars['topic_title'];
        case 'body':
            return $this->_vars['topic_body'];
        case 'body_html':
            return $this->_vars['topic_body_html'];
        case 'body_filter_id':
            return $this->_vars['topic_body_filter_id'];
        case 'ip':
            return $this->_vars['topic_ip'];
        case 'host':
            return $this->_vars['topic_host'];
        case 'closed':
            return $this->_vars['topic_closed'];
        case 'sticky':
            return $this->_vars['topic_sticky'];
        case 'views':
            return $this->_vars['topic_views'];
        case 'last_posted':
            return $this->_vars['topic_last_posted'];
        case 'user_id':
            return $this->_vars['topic_user_id'];
        case 'group_id':
            return $this->_vars['topic_group_id'];
        case 'comment_count':
            return $this->_vars['topic_comment_count'];
        case 'comment_last':
            return $this->_vars['topic_comment_last'];
        case 'comment_lasttime':
            return $this->_vars['topic_comment_lasttime'];
        case 'star_count':
            return $this->_vars['topic_star_count'];
        case 'star_last':
            return $this->_vars['topic_star_last'];
        case 'star_lasttime':
            return $this->_vars['topic_star_lasttime'];
        case 'attachment_count':
            return $this->_vars['topic_attachment_count'];
        case 'attachment_last':
            return $this->_vars['topic_attachment_last'];
        case 'attachment_lasttime':
            return $this->_vars['topic_attachment_lasttime'];
        case 'Comments':
            return $this->_fetchComments($limit, $offset, $sort, $order);
        case 'LastComment':
            return $this->_fetchLastComment();
        case 'Stars':
            return $this->_fetchStars($limit, $offset, $sort, $order);
        case 'LastStar':
            return $this->_fetchLastStar();
        case 'Views':
            return $this->_fetchViews($limit, $offset, $sort, $order);
        case 'LastView':
            return $this->_fetchLastView();
        case 'Attachments':
            return $this->_fetchAttachments($limit, $offset, $sort, $order);
        case 'LastAttachment':
            return $this->_fetchLastAttachment();
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
        case 'Group':
            return $this->_fetchGroup();
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('topic_id', $value, $markDirty);
            break;
        case 'title':
            $this->_setVar('topic_title', $value, $markDirty);
            break;
        case 'body':
            $this->_setVar('topic_body', $value, $markDirty);
            break;
        case 'body_html':
            $this->_setVar('topic_body_html', $value, $markDirty);
            break;
        case 'body_filter_id':
            $this->_setVar('topic_body_filter_id', $value, $markDirty);
            break;
        case 'ip':
            $this->_setVar('topic_ip', $value, $markDirty);
            break;
        case 'host':
            $this->_setVar('topic_host', $value, $markDirty);
            break;
        case 'closed':
            $this->_setVar('topic_closed', $value, $markDirty);
            break;
        case 'sticky':
            $this->_setVar('topic_sticky', $value, $markDirty);
            break;
        case 'views':
            $this->_setVar('topic_views', $value, $markDirty);
            break;
        case 'last_posted':
            $this->_setVar('topic_last_posted', $value, $markDirty);
            break;
        case 'user_id':
            $this->_setVar('topic_user_id', $value, $markDirty);
            break;
        case 'group_id':
            $this->_setVar('topic_group_id', $value, $markDirty);
            break;
        case 'comment_count':
            $this->_setVar('topic_comment_count', $value, $markDirty);
            break;
        case 'comment_last':
            $this->_setVar('topic_comment_last', $value, $markDirty);
            break;
        case 'comment_lasttime':
            $this->_setVar('topic_comment_lasttime', $value, $markDirty);
            break;
        case 'star_count':
            $this->_setVar('topic_star_count', $value, $markDirty);
            break;
        case 'star_last':
            $this->_setVar('topic_star_last', $value, $markDirty);
            break;
        case 'star_lasttime':
            $this->_setVar('topic_star_lasttime', $value, $markDirty);
            break;
        case 'attachment_count':
            $this->_setVar('topic_attachment_count', $value, $markDirty);
            break;
        case 'attachment_last':
            $this->_setVar('topic_attachment_last', $value, $markDirty);
            break;
        case 'attachment_lasttime':
            $this->_setVar('topic_attachment_lasttime', $value, $markDirty);
            break;
        case 'Comments':
            $this->removeComments();
            foreach (array_keys($value) as $i) {
                $this->addComment($value[$i]);
            }
            break;
        case 'Stars':
            $this->removeStars();
            foreach (array_keys($value) as $i) {
                $this->addStar($value[$i]);
            }
            break;
        case 'Views':
            $this->removeViews();
            foreach (array_keys($value) as $i) {
                $this->addView($value[$i]);
            }
            break;
        case 'Attachments':
            $this->removeAttachments();
            foreach (array_keys($value) as $i) {
                $this->addAttachment($value[$i]);
            }
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Forum_Model_Base_TopicRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Topic', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('topic_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('topic_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('topic_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('topic_user_id', $id, $criteria);
    }

    public function fetchByGroup($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('topic_group_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByGroup($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByGroup($id)
    {
        return $this->_countByForeign('topic_group_id', $id);
    }

    public function fetchByGroupAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('topic_group_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByGroupAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByGroupAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('topic_group_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Forum_Model_Base_TopicsByRowset($rs, $this->_model->create('Topic'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Forum_Model_Base_Topics($this->_model, $entities);
    }
}

class Plugg_Forum_Model_Base_TopicsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_Forum_Model_Topic $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Topics', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Forum_Model_Base_Topics extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Topics', $entities);
    }
}