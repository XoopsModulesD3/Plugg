<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Forum/Model/TopicGateway.php
*/
abstract class Plugg_Forum_Model_Base_TopicGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'topic';
    }

    public function getFields()
    {
        return array('topic_id' => Sabai_Model::KEY_TYPE_INT, 'topic_created' => Sabai_Model::KEY_TYPE_INT, 'topic_updated' => Sabai_Model::KEY_TYPE_INT, 'topic_title' => Sabai_Model::KEY_TYPE_VARCHAR, 'topic_body' => Sabai_Model::KEY_TYPE_TEXT, 'topic_body_html' => Sabai_Model::KEY_TYPE_TEXT, 'topic_body_filter_id' => Sabai_Model::KEY_TYPE_INT, 'topic_ip' => Sabai_Model::KEY_TYPE_CHAR, 'topic_host' => Sabai_Model::KEY_TYPE_VARCHAR, 'topic_closed' => Sabai_Model::KEY_TYPE_INT, 'topic_sticky' => Sabai_Model::KEY_TYPE_INT, 'topic_views' => Sabai_Model::KEY_TYPE_INT, 'topic_last_posted' => Sabai_Model::KEY_TYPE_INT, 'topic_user_id' => Sabai_Model::KEY_TYPE_INT, 'topic_group_id' => Sabai_Model::KEY_TYPE_INT, 'topic_comment_count' => Sabai_Model::KEY_TYPE_INT, 'topic_comment_last' => Sabai_Model::KEY_TYPE_INT, 'topic_comment_lasttime' => Sabai_Model::KEY_TYPE_INT, 'topic_star_count' => Sabai_Model::KEY_TYPE_INT, 'topic_star_last' => Sabai_Model::KEY_TYPE_INT, 'topic_star_lasttime' => Sabai_Model::KEY_TYPE_INT, 'topic_attachment_count' => Sabai_Model::KEY_TYPE_INT, 'topic_attachment_last' => Sabai_Model::KEY_TYPE_INT, 'topic_attachment_lasttime' => Sabai_Model::KEY_TYPE_INT);
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %stopic WHERE topic_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %stopic WHERE topic_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(',', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$stopic WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery($values)
    {
        $values['topic_created'] = time();
        $values['topic_updated'] = 0;
        $values['topic_comment_lasttime'] = $values['topic_created'];
        $values['topic_star_lasttime'] = $values['topic_created'];
        $values['topic_attachment_lasttime'] = $values['topic_created'];
        return sprintf("INSERT INTO %stopic(topic_created, topic_updated, topic_title, topic_body, topic_body_html, topic_body_filter_id, topic_ip, topic_host, topic_closed, topic_sticky, topic_views, topic_last_posted, topic_user_id, topic_group_id, topic_comment_count, topic_comment_last, topic_comment_lasttime, topic_star_count, topic_star_last, topic_star_lasttime, topic_attachment_count, topic_attachment_last, topic_attachment_lasttime) VALUES(%d, %d, %s, %s, %s, %d, %s, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", $this->_db->getResourcePrefix(), $values['topic_created'], $values['topic_updated'], $this->_db->escapeString($values['topic_title']), $this->_db->escapeString($values['topic_body']), $this->_db->escapeString($values['topic_body_html']), $values['topic_body_filter_id'], $this->_db->escapeString($values['topic_ip']), $this->_db->escapeString($values['topic_host']), $values['topic_closed'], $values['topic_sticky'], $values['topic_views'], $values['topic_last_posted'], $values['topic_user_id'], $values['topic_group_id'], $values['topic_comment_count'], $values['topic_comment_last'], $values['topic_comment_lasttime'], $values['topic_star_count'], $values['topic_star_last'], $values['topic_star_lasttime'], $values['topic_attachment_count'], $values['topic_attachment_last'], $values['topic_attachment_lasttime']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['topic_updated'];
        $values['topic_updated'] = time();
        return sprintf("UPDATE %stopic SET topic_updated = %d, topic_title = %s, topic_body = %s, topic_body_html = %s, topic_body_filter_id = %d, topic_ip = %s, topic_host = %s, topic_closed = %d, topic_sticky = %d, topic_views = %d, topic_last_posted = %d, topic_user_id = %d, topic_group_id = %d WHERE topic_id = %d AND topic_updated = %d", $this->_db->getResourcePrefix(), $values['topic_updated'], $this->_db->escapeString($values['topic_title']), $this->_db->escapeString($values['topic_body']), $this->_db->escapeString($values['topic_body_html']), $values['topic_body_filter_id'], $this->_db->escapeString($values['topic_ip']), $this->_db->escapeString($values['topic_host']), $values['topic_closed'], $values['topic_sticky'], $values['topic_views'], $values['topic_last_posted'], $values['topic_user_id'], $values['topic_group_id'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$stopic WHERE topic_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['topic_updated'] = 'topic_updated=' . time();
        return sprintf('UPDATE %stopic SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$stopic WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$stopic WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _beforeDeleteTrigger1($id, $old)
    {
        return $this->_db->exec(sprintf('UPDATE %scomment SET comment_topic_id = 0 WHERE comment_topic_id = %d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger2($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sstar WHERE %1$sstar.star_topic_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger3($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sview WHERE %1$sview.view_topic_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger4($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sattachment WHERE %1$sattachment.attachment_topic_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger($id, $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger2($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger3($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger4($id, $old)) return false;
        return true;
    }
}