<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Search/Model/EngineGateway.php
*/
abstract class Plugg_Search_Model_Base_EngineGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'engine';
    }

    public function getFields()
    {
        return array('engine_id' => Sabai_Model::KEY_TYPE_INT, 'engine_created' => Sabai_Model::KEY_TYPE_INT, 'engine_updated' => Sabai_Model::KEY_TYPE_INT, 'engine_plugin' => Sabai_Model::KEY_TYPE_VARCHAR);
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sengine WHERE engine_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sengine WHERE engine_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(',', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sengine WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery($values)
    {
        $values['engine_created'] = time();
        $values['engine_updated'] = 0;
        return sprintf("INSERT INTO %sengine(engine_created, engine_updated, engine_plugin) VALUES(%d, %d, %s)", $this->_db->getResourcePrefix(), $values['engine_created'], $values['engine_updated'], $this->_db->escapeString($values['engine_plugin']));
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['engine_updated'];
        $values['engine_updated'] = time();
        return sprintf("UPDATE %sengine SET engine_updated = %d, engine_plugin = %s WHERE engine_id = %d AND engine_updated = %d", $this->_db->getResourcePrefix(), $values['engine_updated'], $this->_db->escapeString($values['engine_plugin']), $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sengine WHERE engine_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['engine_updated'] = 'engine_updated=' . time();
        return sprintf('UPDATE %sengine SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$sengine WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sengine WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _beforeDeleteTrigger1($id, $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$ssearchable2engine WHERE %1$ssearchable2engine.searchable2engine_engine_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger($id, $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) return false;
        return true;
    }
}