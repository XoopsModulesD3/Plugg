<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/User/Model/Role.php
*/
abstract class Plugg_User_Model_Base_Role extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Role', $model);
        $this->_vars = array('role_id' => 0, 'role_created' => 0, 'role_updated' => 0, 'role_name' => null, 'role_display_name' => null, 'role_permissions' => null, 'role_system' => 0, 'role_member_count' => 0, 'role_member_last' => 0, 'role_member_lasttime' => 0);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('role_id' => 0, 'role_created' => 0, 'role_updated' => 0, 'role_member_count' => 0, 'role_member_last' => 0, 'role_member_lasttime' => 0));
    }

    public function __toString()
    {
        return $this->_get('display_name', null, null);
    }

    public function addMember(Plugg_User_Model_Member $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeMember(Plugg_User_Model_Member $entity)
    {
        return $this->removeMemberById($entity->id);
    }

    public function removeMemberById($id)
    {
        return $this->_removeEntityById('member_id', 'Member', $id);
    }

    public function createMember()
    {
        return $this->_createEntity('Member');
    }

    protected function _fetchMembers($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Member', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastMember()
    {
        if (!isset($this->_objects['LastMember']) && $this->hasLastMember()) {
            $this->_objects['LastMember'] = $this->_fetchEntities('Member', 1, 0, 'member_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastMember'];
    }

    public function paginateMembers($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Member', $perpage, $sort, $order);
    }

    public function removeMembers()
    {
        return $this->_removeEntities('Member');
    }

    public function countMembers()
    {
        return $this->_countEntities('Member');
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['role_id'];
        case 'created':
            return $this->_vars['role_created'];
        case 'updated':
            return $this->_vars['role_updated'];
        case 'name':
            return $this->_vars['role_name'];
        case 'display_name':
            return $this->_vars['role_display_name'];
        case 'permissions':
            return $this->_vars['role_permissions'];
        case 'system':
            return $this->_vars['role_system'];
        case 'member_count':
            return $this->_vars['role_member_count'];
        case 'member_last':
            return $this->_vars['role_member_last'];
        case 'member_lasttime':
            return $this->_vars['role_member_lasttime'];
        case 'Members':
            return $this->_fetchMembers($limit, $offset, $sort, $order);
        case 'LastMember':
            return $this->_fetchLastMember();
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('role_id', $value, $markDirty);
            break;
        case 'name':
            $this->_setVar('role_name', $value, $markDirty);
            break;
        case 'display_name':
            $this->_setVar('role_display_name', $value, $markDirty);
            break;
        case 'permissions':
            $this->_setVar('role_permissions', $value, $markDirty);
            break;
        case 'system':
            $this->_setVar('role_system', $value, $markDirty);
            break;
        case 'member_count':
            $this->_setVar('role_member_count', $value, $markDirty);
            break;
        case 'member_last':
            $this->_setVar('role_member_last', $value, $markDirty);
            break;
        case 'member_lasttime':
            $this->_setVar('role_member_lasttime', $value, $markDirty);
            break;
        case 'Members':
            $this->removeMembers();
            foreach (array_keys($value) as $i) {
                $this->addMember($value[$i]);
            }
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_User_Model_Base_RoleRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Role', $model);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_User_Model_Base_RolesByRowset($rs, $this->_model->create('Role'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_User_Model_Base_Roles($this->_model, $entities);
    }
}

class Plugg_User_Model_Base_RolesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_User_Model_Role $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Roles', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_User_Model_Base_Roles extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Roles', $entities);
    }
}