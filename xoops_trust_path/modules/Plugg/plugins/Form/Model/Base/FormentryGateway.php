<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Form/Model/FormentryGateway.php
*/
abstract class Plugg_Form_Model_Base_FormentryGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'formentry';
    }

    public function getFields()
    {
        return array('formentry_id' => Sabai_Model::KEY_TYPE_INT, 'formentry_created' => Sabai_Model::KEY_TYPE_INT, 'formentry_updated' => Sabai_Model::KEY_TYPE_INT, 'formentry_data' => Sabai_Model::KEY_TYPE_TEXT, 'formentry_ip' => Sabai_Model::KEY_TYPE_VARCHAR, 'formentry_form_id' => Sabai_Model::KEY_TYPE_INT, 'formentry_user_id' => Sabai_Model::KEY_TYPE_INT);
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sformentry WHERE formentry_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sformentry WHERE formentry_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(',', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sformentry WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery($values)
    {
        $values['formentry_created'] = time();
        $values['formentry_updated'] = 0;
        return sprintf("INSERT INTO %sformentry(formentry_created, formentry_updated, formentry_data, formentry_ip, formentry_form_id, formentry_user_id) VALUES(%d, %d, %s, %s, %d, %d)", $this->_db->getResourcePrefix(), $values['formentry_created'], $values['formentry_updated'], $this->_db->escapeString($values['formentry_data']), $this->_db->escapeString($values['formentry_ip']), $values['formentry_form_id'], $values['formentry_user_id']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['formentry_updated'];
        $values['formentry_updated'] = time();
        return sprintf("UPDATE %sformentry SET formentry_updated = %d, formentry_data = %s, formentry_ip = %s, formentry_form_id = %d, formentry_user_id = %d WHERE formentry_id = %d AND formentry_updated = %d", $this->_db->getResourcePrefix(), $values['formentry_updated'], $this->_db->escapeString($values['formentry_data']), $this->_db->escapeString($values['formentry_ip']), $values['formentry_form_id'], $values['formentry_user_id'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sformentry WHERE formentry_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['formentry_updated'] = 'formentry_updated=' . time();
        return sprintf('UPDATE %sformentry SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$sformentry WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sformentry WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, $new)
    {
        if (!empty($new['formentry_form_id'])) {
            $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count + 1, form_formentry_last = %d, form_formentry_lasttime = %d WHERE form_id = %d', $this->_db->getResourcePrefix(), $id, $new['formentry_created'], $new['formentry_form_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, $old)
    {
        if (!empty($old['formentry_form_id'])) {
            $sql = sprintf('SELECT formentry_id, formentry_created FROM %sformentry WHERE formentry_form_id = %d ORDER BY formentry_created DESC', $this->_db->getResourcePrefix(), $old['formentry_form_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count - 1, form_formentry_last = %d, form_formentry_lasttime = %d WHERE form_id = %d', $this->_db->getResourcePrefix(), $row['formentry_id'], $row['formentry_created'], $old['formentry_form_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count - 1, form_formentry_last = 0, form_formentry_lasttime = form_created WHERE form_id = %d', $this->_db->getResourcePrefix(), $old['formentry_form_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, $new, $old)
    {
        if (empty($old['formentry_form_id']) && !empty($new['formentry_form_id'])) {
            $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count + 1, form_formentry_last = %d, form_formentry_lasttime = %d WHERE form_id = %d', $this->_db->getResourcePrefix(), $id, $new['formentry_created'], $new['formentry_form_id']));
        } elseif (!empty($old['formentry_form_id']) && empty($new['formentry_form_id'])) {
            $sql = sprintf('SELECT formentry_id, formentry_created FROM %sformentry WHERE formentry_form_id = %d ORDER BY formentry_created DESC', $this->_db->getResourcePrefix(), $old['formentry_form_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count - 1, form_formentry_last = %d, form_formentry_lasttime = %d WHERE form_id = %d', $this->_db->getResourcePrefix(), $row['formentry_id'], $row['formentry_created'], $old['formentry_form_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count - 1, form_formentry_last = 0, form_formentry_lasttime = form_created WHERE form_id = %d', $this->_db->getResourcePrefix(), $old['formentry_form_id']));
            }
        } elseif ($old['formentry_form_id'] != $new['formentry_form_id']) {
            $sql = sprintf('SELECT formentry_id, formentry_created FROM %sformentry WHERE formentry_form_id = %d ORDER BY formentry_created DESC', $this->_db->getResourcePrefix(), $old['formentry_form_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count - 1, form_formentry_last = %d, form_formentry_lasttime = %d WHERE form_id = %d', $this->_db->getResourcePrefix(), $row['formentry_id'], $row['formentry_created'], $old['formentry_form_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count - 1, form_formentry_last = 0, form_formentry_lasttime = form_created WHERE form_id = %d', $this->_db->getResourcePrefix(), $old['formentry_form_id']));
            }
            $this->_db->exec(sprintf('UPDATE %sform SET form_formentry_count = form_formentry_count + 1, form_formentry_last = %d, form_formentry_lasttime = %d WHERE form_id = %d', $this->_db->getResourcePrefix(), $id, $new['formentry_created'], $new['formentry_form_id']));
        }
    }

    protected function _afterInsertTrigger($id, $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, $new, $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _afterDeleteTrigger($id, $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}