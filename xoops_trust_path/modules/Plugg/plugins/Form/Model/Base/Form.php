<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Form/Model/Form.php
*/
abstract class Plugg_Form_Model_Base_Form extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Form', $model);
        $this->_vars = array('form_id' => 0, 'form_created' => 0, 'form_updated' => 0, 'form_title' => null, 'form_header' => null, 'form_header_formatted' => null, 'form_header_format' => 0, 'form_hidden' => 0, 'form_weight' => 0, 'form_submit_button_label' => null, 'form_confirm' => 0, 'form_confirm_button_label' => null, 'form_anon_view' => 0, 'form_anon_submit' => 0, 'form_email_settings' => null, 'form_formentry_count' => 0, 'form_formentry_last' => 0, 'form_formentry_lasttime' => 0);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('form_id' => 0, 'form_created' => 0, 'form_updated' => 0, 'form_formentry_count' => 0, 'form_formentry_last' => 0, 'form_formentry_lasttime' => 0));
    }

    public function __toString()
    {
        return 'Form #' . $this->_get('id', null, null);
    }

    public function addFormfield(Plugg_Form_Model_Formfield $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeFormfield(Plugg_Form_Model_Formfield $entity)
    {
        return $this->removeFormfieldById($entity->id);
    }

    public function removeFormfieldById($id)
    {
        return $this->_removeEntityById('formfield_id', 'Formfield', $id);
    }

    public function createFormfield()
    {
        return $this->_createEntity('Formfield');
    }

    protected function _fetchFormfields($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Formfield', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastFormfield()
    {
        if (!isset($this->_objects['LastFormfield']) && $this->hasLastFormfield()) {
            $this->_objects['LastFormfield'] = $this->_fetchEntities('Formfield', 1, 0, 'formfield_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastFormfield'];
    }

    public function paginateFormfields($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Formfield', $perpage, $sort, $order);
    }

    public function removeFormfields()
    {
        return $this->_removeEntities('Formfield');
    }

    public function countFormfields()
    {
        return $this->_countEntities('Formfield');
    }

    public function addFormentry(Plugg_Form_Model_Formentry $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeFormentry(Plugg_Form_Model_Formentry $entity)
    {
        return $this->removeFormentryById($entity->id);
    }

    public function removeFormentryById($id)
    {
        return $this->_removeEntityById('formentry_id', 'Formentry', $id);
    }

    public function createFormentry()
    {
        return $this->_createEntity('Formentry');
    }

    protected function _fetchFormentries($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Formentry', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastFormentry()
    {
        if (!isset($this->_objects['LastFormentry']) && $this->hasLastFormentry()) {
            $this->_objects['LastFormentry'] = $this->_fetchEntities('Formentry', 1, 0, 'formentry_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastFormentry'];
    }

    public function paginateFormentries($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Formentry', $perpage, $sort, $order);
    }

    public function removeFormentries()
    {
        return $this->_removeEntities('Formentry');
    }

    public function countFormentries()
    {
        return $this->_countEntities('Formentry');
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['form_id'];
        case 'created':
            return $this->_vars['form_created'];
        case 'updated':
            return $this->_vars['form_updated'];
        case 'title':
            return $this->_vars['form_title'];
        case 'header':
            return $this->_vars['form_header'];
        case 'header_formatted':
            return $this->_vars['form_header_formatted'];
        case 'header_format':
            return $this->_vars['form_header_format'];
        case 'hidden':
            return $this->_vars['form_hidden'];
        case 'weight':
            return $this->_vars['form_weight'];
        case 'submit_button_label':
            return $this->_vars['form_submit_button_label'];
        case 'confirm':
            return $this->_vars['form_confirm'];
        case 'confirm_button_label':
            return $this->_vars['form_confirm_button_label'];
        case 'anon_view':
            return $this->_vars['form_anon_view'];
        case 'anon_submit':
            return $this->_vars['form_anon_submit'];
        case 'email_settings':
            return $this->_vars['form_email_settings'];
        case 'formentry_count':
            return $this->_vars['form_formentry_count'];
        case 'formentry_last':
            return $this->_vars['form_formentry_last'];
        case 'formentry_lasttime':
            return $this->_vars['form_formentry_lasttime'];
        case 'Formfields':
            return $this->_fetchFormfields($limit, $offset, $sort, $order);
        case 'LastFormfield':
            return $this->_fetchLastFormfield();
        case 'Formentries':
            return $this->_fetchFormentries($limit, $offset, $sort, $order);
        case 'LastFormentry':
            return $this->_fetchLastFormentry();
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('form_id', $value, $markDirty);
            break;
        case 'title':
            $this->_setVar('form_title', $value, $markDirty);
            break;
        case 'header':
            $this->_setVar('form_header', $value, $markDirty);
            break;
        case 'header_formatted':
            $this->_setVar('form_header_formatted', $value, $markDirty);
            break;
        case 'header_format':
            $this->_setVar('form_header_format', $value, $markDirty);
            break;
        case 'hidden':
            $this->_setVar('form_hidden', $value, $markDirty);
            break;
        case 'weight':
            $this->_setVar('form_weight', $value, $markDirty);
            break;
        case 'submit_button_label':
            $this->_setVar('form_submit_button_label', $value, $markDirty);
            break;
        case 'confirm':
            $this->_setVar('form_confirm', $value, $markDirty);
            break;
        case 'confirm_button_label':
            $this->_setVar('form_confirm_button_label', $value, $markDirty);
            break;
        case 'anon_view':
            $this->_setVar('form_anon_view', $value, $markDirty);
            break;
        case 'anon_submit':
            $this->_setVar('form_anon_submit', $value, $markDirty);
            break;
        case 'email_settings':
            $this->_setVar('form_email_settings', $value, $markDirty);
            break;
        case 'formentry_count':
            $this->_setVar('form_formentry_count', $value, $markDirty);
            break;
        case 'formentry_last':
            $this->_setVar('form_formentry_last', $value, $markDirty);
            break;
        case 'formentry_lasttime':
            $this->_setVar('form_formentry_lasttime', $value, $markDirty);
            break;
        case 'Formfields':
            $this->removeFormfields();
            foreach (array_keys($value) as $i) {
                $this->addFormfield($value[$i]);
            }
            break;
        case 'Formentries':
            $this->removeFormentries();
            foreach (array_keys($value) as $i) {
                $this->addFormentry($value[$i]);
            }
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Form_Model_Base_FormRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Form', $model);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Form_Model_Base_FormsByRowset($rs, $this->_model->create('Form'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Form_Model_Base_Forms($this->_model, $entities);
    }
}

class Plugg_Form_Model_Base_FormsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_Form_Model_Form $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Forms', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Form_Model_Base_Forms extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Forms', $entities);
    }
}