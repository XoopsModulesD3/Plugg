<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Form/Model/Formentry.php
*/
abstract class Plugg_Form_Model_Base_Formentry extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Formentry', $model);
        $this->_vars = array('formentry_id' => 0, 'formentry_created' => 0, 'formentry_updated' => 0, 'formentry_data' => null, 'formentry_ip' => null, 'formentry_form_id' => 0, 'formentry_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('formentry_id' => 0, 'formentry_created' => 0, 'formentry_updated' => 0));
    }

    public function __toString()
    {
        return 'Formentry #' . $this->_get('id', null, null);
    }

    public function assignUser($user, $markDirty = true)
    {
        $this->_set('user_id', $user->id, $markDirty);
        return $this;
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->User_Identity($this->_vars['formentry_user_id'], $withData);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function assignForm(Plugg_Form_Model_Form $entity)
    {
        $this->_assignEntity($entity, 'form_id');
        return $this;
    }

    public function unassignForm()
    {
        $this->_unassignEntity('Form', 'form_id');
        return $this;
    }

    protected function _fetchForm()
    {
        return $this->_fetchEntity('Form', 'form_id');
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['formentry_id'];
        case 'created':
            return $this->_vars['formentry_created'];
        case 'updated':
            return $this->_vars['formentry_updated'];
        case 'data':
            return $this->_vars['formentry_data'];
        case 'ip':
            return $this->_vars['formentry_ip'];
        case 'form_id':
            return $this->_vars['formentry_form_id'];
        case 'user_id':
            return $this->_vars['formentry_user_id'];
        case 'Form':
            return $this->_fetchForm();
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('formentry_id', $value, $markDirty);
            break;
        case 'data':
            $this->_setVar('formentry_data', $value, $markDirty);
            break;
        case 'ip':
            $this->_setVar('formentry_ip', $value, $markDirty);
            break;
        case 'form_id':
            $this->_setVar('formentry_form_id', $value, $markDirty);
            break;
        case 'user_id':
            $this->_setVar('formentry_user_id', $value, $markDirty);
            break;
        case 'Form':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignForm($entity);
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Form_Model_Base_FormentryRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Formentry', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('formentry_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('formentry_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('formentry_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('formentry_user_id', $id, $criteria);
    }

    public function fetchByForm($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('formentry_form_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByForm($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Form', $id, $perpage, $sort, $order);
    }

    public function countByForm($id)
    {
        return $this->_countByForeign('formentry_form_id', $id);
    }

    public function fetchByFormAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('formentry_form_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByFormAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Form', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByFormAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('formentry_form_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Form_Model_Base_FormentriesByRowset($rs, $this->_model->create('Formentry'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Form_Model_Base_Formentries($this->_model, $entities);
    }
}

class Plugg_Form_Model_Base_FormentriesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_Form_Model_Formentry $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Formentries', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Form_Model_Base_Formentries extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Formentries', $entities);
    }
}