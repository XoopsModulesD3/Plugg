<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Form/Model/Formfield.php
*/
abstract class Plugg_Form_Model_Base_Formfield extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Formfield', $model);
        $this->_vars = array('formfield_id' => 0, 'formfield_created' => 0, 'formfield_updated' => 0, 'formfield_name' => null, 'formfield_title' => null, 'formfield_description' => null, 'formfield_weight' => 0, 'formfield_required' => 0, 'formfield_disabled' => 0, 'formfield_collapsible' => 0, 'formfield_collapsed' => 0, 'formfield_settings' => null, 'formfield_fieldset' => 0, 'formfield_field_id' => 0, 'formfield_form_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('formfield_id' => 0, 'formfield_created' => 0, 'formfield_updated' => 0));
    }

    public function __toString()
    {
        return 'Formfield #' . $this->_get('id', null, null);
    }

    public function assignField(Plugg_Form_Model_Field $entity)
    {
        $this->_assignEntity($entity, 'field_id');
        return $this;
    }

    public function unassignField()
    {
        $this->_unassignEntity('Field', 'field_id');
        return $this;
    }

    protected function _fetchField()
    {
        return $this->_fetchEntity('Field', 'field_id');
    }

    public function assignForm(Plugg_Form_Model_Form $entity)
    {
        $this->_assignEntity($entity, 'form_id');
        return $this;
    }

    public function unassignForm()
    {
        $this->_unassignEntity('Form', 'form_id');
        return $this;
    }

    protected function _fetchForm()
    {
        return $this->_fetchEntity('Form', 'form_id');
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['formfield_id'];
        case 'created':
            return $this->_vars['formfield_created'];
        case 'updated':
            return $this->_vars['formfield_updated'];
        case 'name':
            return $this->_vars['formfield_name'];
        case 'title':
            return $this->_vars['formfield_title'];
        case 'description':
            return $this->_vars['formfield_description'];
        case 'weight':
            return $this->_vars['formfield_weight'];
        case 'required':
            return $this->_vars['formfield_required'];
        case 'disabled':
            return $this->_vars['formfield_disabled'];
        case 'collapsible':
            return $this->_vars['formfield_collapsible'];
        case 'collapsed':
            return $this->_vars['formfield_collapsed'];
        case 'settings':
            return $this->_vars['formfield_settings'];
        case 'fieldset':
            return $this->_vars['formfield_fieldset'];
        case 'field_id':
            return $this->_vars['formfield_field_id'];
        case 'form_id':
            return $this->_vars['formfield_form_id'];
        case 'Field':
            return $this->_fetchField();
        case 'Form':
            return $this->_fetchForm();
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('formfield_id', $value, $markDirty);
            break;
        case 'name':
            $this->_setVar('formfield_name', $value, $markDirty);
            break;
        case 'title':
            $this->_setVar('formfield_title', $value, $markDirty);
            break;
        case 'description':
            $this->_setVar('formfield_description', $value, $markDirty);
            break;
        case 'weight':
            $this->_setVar('formfield_weight', $value, $markDirty);
            break;
        case 'required':
            $this->_setVar('formfield_required', $value, $markDirty);
            break;
        case 'disabled':
            $this->_setVar('formfield_disabled', $value, $markDirty);
            break;
        case 'collapsible':
            $this->_setVar('formfield_collapsible', $value, $markDirty);
            break;
        case 'collapsed':
            $this->_setVar('formfield_collapsed', $value, $markDirty);
            break;
        case 'settings':
            $this->_setVar('formfield_settings', $value, $markDirty);
            break;
        case 'fieldset':
            $this->_setVar('formfield_fieldset', $value, $markDirty);
            break;
        case 'field_id':
            $this->_setVar('formfield_field_id', $value, $markDirty);
            break;
        case 'form_id':
            $this->_setVar('formfield_form_id', $value, $markDirty);
            break;
        case 'Field':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignField($entity);
            break;
        case 'Form':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignForm($entity);
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Form_Model_Base_FormfieldRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Formfield', $model);
    }

    public function fetchByField($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('formfield_field_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByField($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Field', $id, $perpage, $sort, $order);
    }

    public function countByField($id)
    {
        return $this->_countByForeign('formfield_field_id', $id);
    }

    public function fetchByFieldAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('formfield_field_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByFieldAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Field', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByFieldAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('formfield_field_id', $id, $criteria);
    }

    public function fetchByForm($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('formfield_form_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByForm($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Form', $id, $perpage, $sort, $order);
    }

    public function countByForm($id)
    {
        return $this->_countByForeign('formfield_form_id', $id);
    }

    public function fetchByFormAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('formfield_form_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByFormAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Form', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByFormAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('formfield_form_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Form_Model_Base_FormfieldsByRowset($rs, $this->_model->create('Formfield'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Form_Model_Base_Formfields($this->_model, $entities);
    }
}

class Plugg_Form_Model_Base_FormfieldsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_Form_Model_Formfield $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Formfields', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Form_Model_Base_Formfields extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Formfields', $entities);
    }
}