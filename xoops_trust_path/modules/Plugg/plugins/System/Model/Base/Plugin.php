<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/System/Model/Plugin.php
*/
abstract class Plugg_System_Model_Base_Plugin extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Plugin', $model);
        $this->_vars = array('plugin_id' => 0, 'plugin_created' => 0, 'plugin_updated' => 0, 'plugin_name' => null, 'plugin_nicename' => null, 'plugin_version' => null, 'plugin_params' => null, 'plugin_priority' => 0, 'plugin_active' => 1, 'plugin_locked' => 1);
    }

    public function __clone()
    {
        $this->_vars = array_merge($this->_vars, array('plugin_id' => 0, 'plugin_created' => 0, 'plugin_updated' => 0));
    }

    public function __toString()
    {
        return $this->_get('name', null, null);
    }

    public function addDependency(Plugg_System_Model_Dependency $entity)
    {
        $this->_addEntity($entity);
        return $this;
    }

    public function removeDependency(Plugg_System_Model_Dependency $entity)
    {
        return $this->removeDependencyById($entity->id);
    }

    public function removeDependencyById($id)
    {
        return $this->_removeEntityById('dependency_id', 'Dependency', $id);
    }

    public function createDependency()
    {
        return $this->_createEntity('Dependency');
    }

    protected function _fetchDependencies($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Dependency', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastDependency()
    {
        if (!isset($this->_objects['LastDependency']) && $this->hasLastDependency()) {
            $this->_objects['LastDependency'] = $this->_fetchEntities('Dependency', 1, 0, 'dependency_created', 'DESC')->getFirst();
        }
        return $this->_objects['LastDependency'];
    }

    public function paginateDependencies($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Dependency', $perpage, $sort, $order);
    }

    public function removeDependencies()
    {
        return $this->_removeEntities('Dependency');
    }

    public function countDependencies()
    {
        return $this->_countEntities('Dependency');
    }

    protected function _get($name, $sort, $order, $limit = 0, $offset = 0)
    {
        switch ($name) {
        case 'id':
            return $this->_vars['plugin_id'];
        case 'created':
            return $this->_vars['plugin_created'];
        case 'updated':
            return $this->_vars['plugin_updated'];
        case 'name':
            return $this->_vars['plugin_name'];
        case 'nicename':
            return $this->_vars['plugin_nicename'];
        case 'version':
            return $this->_vars['plugin_version'];
        case 'params':
            return $this->_vars['plugin_params'];
        case 'priority':
            return $this->_vars['plugin_priority'];
        case 'active':
            return $this->_vars['plugin_active'];
        case 'locked':
            return $this->_vars['plugin_locked'];
        case 'Dependencies':
            return $this->_fetchDependencies($limit, $offset, $sort, $order);
        case 'LastDependency':
            return $this->_fetchLastDependency();
default:
return isset($this->_objects[$name]) ? $this->_objects[$name] : null;
        }
    }

    protected function _set($name, $value, $markDirty)
    {
        switch ($name) {
        case 'id':
            $this->_setVar('plugin_id', $value, $markDirty);
            break;
        case 'name':
            $this->_setVar('plugin_name', $value, $markDirty);
            break;
        case 'nicename':
            $this->_setVar('plugin_nicename', $value, $markDirty);
            break;
        case 'version':
            $this->_setVar('plugin_version', $value, $markDirty);
            break;
        case 'params':
            $this->_setVar('plugin_params', $value, $markDirty);
            break;
        case 'priority':
            $this->_setVar('plugin_priority', $value, $markDirty);
            break;
        case 'active':
            $this->_setVar('plugin_active', $value, $markDirty);
            break;
        case 'locked':
            $this->_setVar('plugin_locked', $value, $markDirty);
            break;
        case 'Dependencies':
            $this->removeDependencies();
            foreach (array_keys($value) as $i) {
                $this->addDependency($value[$i]);
            }
            break;
        }
    }

    protected function _initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_System_Model_Base_PluginRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Plugin', $model);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_System_Model_Base_PluginsByRowset($rs, $this->_model->create('Plugin'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_System_Model_Base_Plugins($this->_model, $entities);
    }
}

class Plugg_System_Model_Base_PluginsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Plugg_System_Model_Plugin $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Plugins', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_System_Model_Base_Plugins extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Plugins', $entities);
    }
}